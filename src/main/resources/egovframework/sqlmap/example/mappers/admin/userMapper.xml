<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.example.admin.users.service.impl.AdminUserMapper">
	<!-- 관리자 로그인 체크  -->
	<select id="loginAdminCheck" parameterType="map" resultType="AdminUserVO">
	    SELECT 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        r.id AS roleId,
	        r.role_name,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    FROM user_info u
	    JOIN user_roles ur ON u.id = ur.user_id
	    JOIN roles r ON ur.role_id = r.id
	    WHERE u.user_id = #{id}
	      AND u.user_pw = #{password}
	      AND u.user_status = 'active'
	</select>
	
	<select id="countByAdmin" resultType="int">
	    select 
	        count(*)
	    from user_info u
	    join user_roles ur on u.id = ur.user_id
	    join roles r on ur.role_id = r.id
	</select>
	
	<select id="findByAdmin" resultType="map">
	    select 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        r.id AS role_id,
	        r.role_name,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    from
	    	user_info u
	    join 
	    	user_roles ur on u.id = ur.user_id
	    join 
	    	roles r on ur.role_id = r.id
	    limit 
        	#{size} 
        offset
        	#{offset}
	</select>
	
	<select id="findOneAdmin" resultType="map">
	    select 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        r.id AS role_id,
	        r.role_name,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    from
	    	user_info u
	    join 
	    	user_roles ur on u.id = ur.user_id
	    join 
	    	roles r on ur.role_id = r.id
	    where
	    	u.id = #{id}
	</select>
	
	<select id="findRole" resultType="RolesVO">
	    select 
	        id,
	        role_name
	    from
	    	roles
	</select>
	
	<select id="checkId" resultType="int">
	    select 
	    	count(*) 
	    from 
	    	user_info 
	    where 
	    	user_id = #{userId};
	</select>
	
	<insert id="adminCreate" parameterType="AdminUserVO" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into user_info(user_id, user_email, user_pw, user_name, user_status)
		values(#{userId},#{userEmail},#{userPw},#{userName},#{userStatus})
	</insert>
	
	<insert id="insertAdminRoleMap" parameterType="map">
	  insert into user_roles (user_id, role_id)
	  values (#{userId}, #{roleId})
	  on duplicate key update role_id = values(role_id)
	</insert>
	
	<delete id="deleteAdmin">
	 	delete 
	 		from user_info
	 	where
	 		id = #{id}
	</delete>
	
	
	<update id="adminUpdate">
		update
			user_info
		  <set>
		    <if test="userPw != null">user_pw = #{userPw},</if>
		    <if test="userName != null">user_name = #{userName},</if>
		    <if test="userEmail != null">user_email = #{userEmail},</if>
		    <if test="userStatus != null">user_status = #{userStatus},</if>
		  </set>
		where
			id = #{id}
	</update>
	
	<update id="updateAdminRoleMap" parameterType="map">
		update
			user_roles
		set
			role_id = #{roleId}
		where
			user_id = #{userId}
	</update>
	
	<select id="countByUser" resultType="int">
   	    select
   			count(*)
		from
		    user_info
		where
		    id not in (select user_id from user_roles);
	</select>
	
	<select id="findByUser" resultType="map">
	    select 
	        id,
	        user_id,
	        user_name,
	        user_email,
	        user_status,
	        create_at,
	        update_at
	    from
	    	user_info 
		where
	    	id not in (select user_id from user_roles)
	    limit 
        	#{size} 
        offset
        	#{offset}
	</select>
	
	<select id="findOneUser" resultType="map">
	    select 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    from
	    	user_info u
	    where
	    	u.id = #{id}
	   	and 
	   		id not in (select user_id from user_roles)
	</select>
	
	<delete id="deleteUser">
	 	delete 
	 		from user_info
	 	where
	 		id = #{id}
	</delete>
	
	
	<update id="userUpdate">
		update
			user_info
		  <set>
		    <if test="userPw != null">user_pw = #{userPw},</if>
		    <if test="userName != null">user_name = #{userName},</if>
		    <if test="userEmail != null">user_email = #{userEmail},</if>
		    <if test="userStatus != null">user_status = #{userStatus},</if>
		  </set>
		where
			id = #{id}
	</update>
</mapper>