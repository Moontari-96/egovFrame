<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.example.admin.users.service.impl.AdminUserMapper">
	<!-- 관리자 로그인 체크  -->
	<select id="loginAdminCheck" parameterType="map" resultType="AdminUserVO">
	    SELECT 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        r.id AS role_id,
	        r.role_name,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    FROM user_info u
	    JOIN user_roles ur ON u.id = ur.user_id
	    JOIN roles r ON ur.role_id = r.id
	    WHERE u.user_id = #{id}
	      AND u.user_pw = #{password}
	      AND u.user_status = 'active'
	</select>
	
	<select id="countByAdmin" resultType="int">
	    select 
	        count(*)
	    from user_info u
	    join user_roles ur on u.id = ur.user_id
	    join roles r on ur.role_id = r.id
	</select>
	
	<select id="findByAdmin" resultType="map">
	    select 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        r.id AS role_id,
	        r.role_name,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    from
	    	user_info u
	    join 
	    	user_roles ur on u.id = ur.user_id
	    join 
	    	roles r on ur.role_id = r.id
	    limit 
        	#{size} 
        offset
        	#{offset}
	</select>
	
	<select id="findOneAdmin" resultType="map">
	    select 
	        u.id,
	        u.user_id,
	        u.user_name,
	        u.user_email,
	        r.id AS role_id,
	        r.role_name,
	        u.user_status,
	        u.create_at,
	        u.update_at
	    from
	    	user_info u
	    join 
	    	user_roles ur on u.id = ur.user_id
	    join 
	    	roles r on ur.role_id = r.id
	    where
	    	u.id = #{id}
	</select>
	
	<select id="findRole" resultType="RolesVO">
	    select 
	        id,
	        role_name
	    from
	    	roles
	</select>
</mapper>